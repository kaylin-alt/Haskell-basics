HC8T1: Create a type synonym called Address for String and a type synonym called Value for Int. Define a function generateTx :: Address -> Address -> Value -> String that takes two addresses and a value and returns a string concatenating these.

type Address = String
type Value   = Int

generateTx :: Address -> Address -> Value -> String
generateTx from to amount = from ++ " -> " ++ to ++ " : " ++ show amount

main :: IO ()
main = do
  putStrLn (generateTx "Alice" "Bob" 50)    


  2.HC8T2: Define a new type PaymentMethod with the constructors Cash, Card, and Cryptocurrency. Create a Person type that includes a name, address (tuple of String and Int), and a payment method. Create a person bob who pays with cash.

  data PaymentMethod = Cash | Card | Cryptocurrency
  deriving Show

data Person = Person
  { name    :: String
  , address :: (String, Int)
  , payment :: PaymentMethod
  } deriving Show

bob :: Person
bob = Person { name = "Bob", address = ("Main Street", 42), payment = Cash }

main :: IO ()
main = print bob



3.HC8T3: Define a type Shape with constructors Circle Float and Rectangle Float Float. Create a function area :: Shape -> Float that calculates the area of the shape. Calculate the area of a circle with radius 5 and a rectangle with sides 10 and 5.

module Main where

data Shape = Circle Double | Rectangle Double Double
  deriving Show

area :: Shape -> Double
area (Circle r)      = pi * r * r
area (Rectangle w h) = w * h

main :: IO ()
main = do
  putStrLn $ "Circle radius 5 area: " ++ show (area (Circle 5))          
  putStrLn $ "Rectangle 10x5 area: " ++ show (area (Rectangle 10 5))   


4.HC8T4: Define a new type Employee using record syntax with fields name :: String and experienceInYears :: Float. Create an employee richard with 7.5 years of experience.

module Main where

data Employee = Employee
  { name :: String
  , experienceInYears :: Float
  } deriving Show

richard :: Employee
richard = Employee { name = "Richard", experienceInYears = 7.5 }

main :: IO ()
main = print richard


5.HC8T5: Define a type Person using a record syntax that includes name :: String, age :: Int, and isEmployed :: Bool. Create a person1 who is employed, and a person2 who is unemployed.

data Person = Person
  { name       :: String
  , age        :: Int
  , isEmployed :: Bool
  } deriving Show

person1 :: Person
person1 = Person { name = "Alice", age = 30, isEmployed = True }

person2 :: Person
person2 = Person { name = "Bob", age = 25, isEmployed = False }

main :: IO ()
main = do
  print person1
  print person2



6.HC8T6: Define a type Shape using record syntax with fields center :: (Float, Float), color :: String, and radius :: Float for circles, and width :: Float, height :: Float, and color :: String for rectangles. Create an instance of Shape for a circle and a rectangle.

module Main where

data Shape
  = Circle { center :: (Float, Float), circleColor :: String, radius :: Float }
  | Rectangle { width :: Float, height :: Float, rectColor :: String }
  deriving Show

myCircle :: Shape
myCircle = Circle { center = (0.0, 0.0), circleColor = "Red", radius = 5.0 }

myRectangle :: Shape
myRectangle = Rectangle { width = 10.0, height = 5.0, rectColor = "Blue" }

main :: IO ()
main = do
  print myCircle
  print myRectangle


7.HC8T7: Define a new type Animal using data with constructors Dog String and Cat String. Create a function describeAnimal :: Animal -> String that describes the animal. Create instances for a dog and a cat.

module Main where

data Animal = Dog String | Cat String

describeAnimal :: Animal -> String
describeAnimal (Dog name) = "Dog named " ++ name
describeAnimal (Cat name) = "Cat named " ++ name

myDog :: Animal
myDog = Dog "Rex"

myCat :: Animal
myCat = Cat "Whiskers"

main :: IO ()
main = do
  putStrLn (describeAnimal myDog)  
  putStrLn (describeAnimal myCat)  



8.HC8T8: Using type synonyms, create a type synonym Name for String and a type synonym Age for Int. Define a function greet :: Name -> Age -> String that takes a name and age and returns a greeting.

module Main where

type Name = String
type Age  = Int

greet :: Name -> Age -> String
greet n a = "Hello, my name is " ++ n ++ " and I am " ++ show a ++ " years old."

main :: IO ()
main = do
  putStrLn (greet "Alice" 30)
  putStrLn (greet "Bob" 25)



9.HC8T9: Define a type Transaction with fields from :: Address, to :: Address, amount :: Value, and transactionId :: String. Define a function createTransaction :: Address -> Address -> Value -> String that creates a Transaction and returns the transaction id.

module Main where

type Address = String
type Value   = Int

data Transaction = Transaction
  { from          :: Address
  , to            :: Address
  , amount        :: Value
  , transactionId :: String
  } deriving Show

createTransaction :: Address -> Address -> Value -> String
createTransaction f t v =
  let tx = Transaction { from = f, to = t, amount = v, transactionId = f ++ "->" ++ t ++ ":" ++ show v }
  in transactionId tx

main :: IO ()
main = do
  putStrLn (createTransaction "Alice" "Bob" 100)


10.HC8T10: Using deriving Show, define a type Book with fields title :: String, author :: String, and year :: Int. Create a Book instance for a book and print it using the Show instance.

odule Main where

data Book = Book
  { title  :: String
  , author :: String
  , year   :: Int
  } deriving Show

myBook :: Book
myBook = Book { title = "1984", author = "George Orwell", year = 1949 }

main :: IO ()
main = print myBook
